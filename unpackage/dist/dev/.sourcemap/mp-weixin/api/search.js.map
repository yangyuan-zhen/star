{"version":3,"file":"search.js","sources":["api/search.js"],"sourcesContent":["\"use strict\";\nconst common_vendor = require(\"../common/vendor.js\");\n\n// 优化缓存策略\nconst CACHE_DURATION = 5 * 60 * 1000; // 5分钟缓存\nconst RETRY_TIMES = 2;\nconst RETRY_DELAY = 1000;\n\nconst getCachedData = (key) => {\n    const data = uni.getStorageSync(key);\n    const time = uni.getStorageSync(`${key}_time`);\n    if (data && time && (Date.now() - time < CACHE_DURATION)) {\n        return data;\n    }\n    return null;\n};\n\n// 添加请求重试和错误处理\nconst requestWithRetry = async (options, retryCount = 0) => {\n    try {\n        const response = await uni.request(options);\n        return response;\n    } catch (error) {\n        if (retryCount < RETRY_TIMES) {\n            await new Promise(resolve => setTimeout(resolve, RETRY_DELAY));\n            return requestWithRetry(options, retryCount + 1);\n        }\n        throw error;\n    }\n};\n\n// 天气画报接口\nconst getWeatherReport = (city) => {\n    return new Promise((resolve, reject) => {\n        uni.request({\n            url: 'https://api.coze.cn/v1/workflow/run',\n            method: 'POST',\n            header: {\n                'Authorization': 'Bearer pat_0xvh1L4lHPEiozeyZ0u9TnnVwD4cO8GkaM87ceE4z5is1uIuydjQ4AnzsIpgNFoV',\n                'Content-Type': 'application/json'\n            },\n            data: {\n                \"workflow_id\": \"7442954002298388492\",\n                \"parameters\": {\n                    \"city\": city\n                }\n            },\n            success: (res) => {\n                if (res.data.code === 0) {\n                    try {\n                        // 解析字符串格式的 data\n                        const weatherData = JSON.parse(res.data.data);\n                        resolve(weatherData);\n                    } catch (error) {\n                        reject({\n                            code: -1,\n                            message: '数据解析失败'\n                        });\n                    }\n                } else {\n                    reject({\n                        code: -1,\n                        message: res.data.msg || '获取天气数据失败'\n                    });\n                }\n            },\n            fail: (err) => {\n                reject(err);\n            }\n        })\n    })\n}\n\n// AI荐书接口   \nconst getBookRecommend = (bookName) => {\n    return new Promise((resolve, reject) => {\n        uni.request({\n            url: 'https://api.coze.cn/v1/workflow/run',\n            method: 'POST',\n            header: {\n                'Authorization': 'Bearer pat_0xvh1L4lHPEiozeyZ0u9TnnVwD4cO8GkaM87ceE4z5is1uIuydjQ4AnzsIpgNFoV',\n                'Content-Type': 'application/json'\n            },\n            data: {\n                \"workflow_id\": \"7443436905217835019\",\n                \"parameters\": {\n                    \"BOT_USER_INPUT\": bookName\n                }\n            },\n            success: (res) => {\n                if (res.data.code === 0) {\n                    try {\n                        // 解析返回的数据\n                        const bookData = JSON.parse(res.data.data);\n                        resolve(bookData);\n                    } catch (error) {\n                        reject({\n                            code: -1,\n                            message: '数据解析失败'\n                        });\n                    }\n                } else {\n                    reject({\n                        code: -1,\n                        message: res.data.msg || '获取图书推荐失败'\n                    });\n                }\n            },\n            fail: (err) => {\n                reject(err);\n            }\n        })\n    })\n}\n\n// 翻译接口\nconst translateText = (text) => {\n    return new Promise((resolve, reject) => {\n        uni.request({\n            url: 'https://api.coze.cn/v1/workflow/run',\n            method: 'POST',\n            header: {\n                'Authorization': 'Bearer pat_0xvh1L4lHPEiozeyZ0u9TnnVwD4cO8GkaM87ceE4z5is1uIuydjQ4AnzsIpgNFoV',\n                'Content-Type': 'application/json'\n            },\n            data: {\n                workflow_id: '7445294801782259738',\n                parameters: {\n                    BOT_USER_INPUT: text\n                }\n            },\n            success: (res) => {\n                if (res.data.code === 0) {\n                    try {\n                        const result = JSON.parse(res.data.data)\n                        resolve(result)\n                    } catch (error) {\n                        reject({\n                            code: -1,\n                            message: '数据解析失败'\n                        })\n                    }\n                } else {\n                    reject({\n                        code: -1,\n                        message: res.data.msg || '翻译失败'\n                    })\n                }\n            },\n            fail: (err) => {\n                reject(err)\n            }\n        })\n    })\n}\n\n// 获取电影数据接口\nconst getMovieData = () => {\n    return new Promise((resolve, reject) => {\n        const makeRequest = (retryCount = 0) => {\n            uni.request({\n                url: 'https://www.cikeee.cc/api',\n                method: 'GET',\n                timeout: 10000,\n                header: {\n                    'Cookie': 'PHPSESSID=caf3224b23f7ae7b415701a1872652bc'\n                },\n                data: {\n                    app_key: 'pub_23020990025',\n                    t: Date.now()\n                },\n                success: (res) => {\n                    console.log('API响应:', res);\n                    if (res.statusCode === 200 && res.data) {\n                        // 缓存数据\n                        try {\n                            uni.setStorageSync('movieCache', res.data);\n                            uni.setStorageSync('movieCacheTime', Date.now());\n                        } catch (e) {\n                            console.error('缓存数据失败:', e);\n                        }\n                        resolve(res.data);\n                    } else {\n                        // 尝试使用缓存数据\n                        const cachedData = uni.getStorageSync('movieCache');\n                        if (cachedData) {\n                            console.log('使用缓存数据');\n                            resolve(cachedData);\n                        } else if (retryCount < 2) {\n                            console.log(`重试请求 ${retryCount + 1}`);\n                            setTimeout(() => makeRequest(retryCount + 1), 1000);\n                        } else {\n                            reject({\n                                code: -1,\n                                message: '获取电影数据失败',\n                                detail: res\n                            });\n                        }\n                    }\n                },\n                fail: (err) => {\n                    console.error('请求失败详情:', err);\n                    const cachedData = uni.getStorageSync('movieCache');\n                    if (cachedData) {\n                        console.log('使用缓存数据');\n                        resolve(cachedData);\n                    } else if (retryCount < 2) {\n                        console.log(`重试请求 ${retryCount + 1}`);\n                        setTimeout(() => makeRequest(retryCount + 1), 1000);\n                    } else {\n                        reject({\n                            code: -1,\n                            message: '请求失败',\n                            detail: err\n                        });\n                    }\n                }\n            });\n        };\n\n        makeRequest();\n    });\n};\n// 获取节假日数据接口\nconst getHolidayData = () => {\n    return new Promise((resolve, reject) => {\n        // 先检查缓存\n        const cachedData = getCachedData('holidayCache');\n        if (cachedData) {\n            resolve(cachedData);\n            return;\n        }\n\n        // 添加重试机制\n        const makeRequest = (retryCount = 0) => {\n            uni.request({\n                url: `https://timor.tech/api/holiday/year/${new Date().getFullYear()}`,\n                method: 'GET',\n                timeout: 10000, // 添加超时设置\n                success: (res) => {\n                    console.log('节假日API响应:', res); // 添加日志\n                    if (res.statusCode === 200 && res.data && res.data.code === 0) {\n                        try {\n                            uni.setStorageSync('holidayCache', res.data);\n                            uni.setStorageSync('holidayCache_time', Date.now());\n                            resolve(res.data);\n                        } catch (e) {\n                            console.error('缓存节假日数据失败:', e);\n                            resolve(res.data); // 即使缓存失败也返回数据\n                        }\n                    } else if (retryCount < RETRY_TIMES) {\n                        console.log(`节假日API重试 ${retryCount + 1}`);\n                        setTimeout(() => makeRequest(retryCount + 1), RETRY_DELAY);\n                    } else {\n                        // 尝试使用缓存\n                        const cachedData = uni.getStorageSync('holidayCache');\n                        if (cachedData) {\n                            console.log('使用已缓存的节假日数据');\n                            resolve(cachedData);\n                        } else {\n                            reject({\n                                code: -1,\n                                message: '获取节假日数据失败',\n                                detail: res\n                            });\n                        }\n                    }\n                },\n                fail: (err) => {\n                    console.error('节假日API请求失败:', err);\n                    if (retryCount < RETRY_TIMES) {\n                        setTimeout(() => makeRequest(retryCount + 1), RETRY_DELAY);\n                    } else {\n                        // 尝试使用缓存\n                        const cachedData = uni.getStorageSync('holidayCache');\n                        if (cachedData) {\n                            resolve(cachedData);\n                        } else {\n                            reject({\n                                code: -1,\n                                message: '节假日API请求失败',\n                                detail: err\n                            });\n                        }\n                    }\n                }\n            });\n        };\n\n        makeRequest();\n    });\n};\n\n// 添加统一的错误处理函数\nconst handleApiError = (error) => {\n    if (error.statusCode === 401 || (error.data && error.data.code === 401)) {\n        uni.showToast({\n            title: 'API授权已过期，请等待开发者更新',\n            icon: 'none',\n            duration: 3000\n        });\n        throw { code: 401, message: 'API授权已过期' };\n    }\n    throw error;\n};\n\n// 买什么接口\nconst getShoppingAdvice = (query, maxPrice, minPrice, location = '') => {\n    return new Promise((resolve, reject) => {\n        // 参数验证\n        if (!query || !maxPrice || !minPrice) {\n            reject({\n                code: -1,\n                message: '请填写完整的查询信息'\n            });\n            return;\n        }\n\n        uni.request({\n            url: 'https://api.coze.cn/v1/workflow/run',\n            method: 'POST',\n            header: {\n                'Authorization': 'Bearer pat_0xvh1L4lHPEiozeyZ0u9TnnVwD4cO8GkaM87ceE4z5is1uIuydjQ4AnzsIpgNFoV',\n                'Content-Type': 'application/json'\n            },\n            data: {\n                \"workflow_id\": \"7450799344502423603\",\n                \"parameters\": {\n                    \"query\": query,\n                    \"max_price\": maxPrice,\n                    \"min_price\": minPrice,\n                    \"location\": location\n                }\n            },\n            success: (res) => {\n                if (res.data.code === 0) {\n                    try {\n                        // 直接返回数据，不进行JSON解析\n                        resolve(res.data.data);\n                    } catch (error) {\n                        reject({\n                            code: -1,\n                            message: '数据解析失败'\n                        });\n                    }\n                } else {\n                    reject({\n                        code: -1,\n                        message: res.data.msg || '获取购物建议失败'\n                    });\n                }\n            },\n            fail: (err) => {\n                reject(err);\n            }\n        });\n    });\n};\n\n// 和风天气API接口\nconst QWEATHER_KEY = '7fdcb07d68dc4296bd06970b643ec23a';\n\nconst getQWeather = (location) => {\n    return new Promise((resolve, reject) => {\n        // 先检查缓存\n        const cachedData = getCachedData('weatherCache');\n        if (cachedData) {\n            resolve(cachedData);\n            return;\n        }\n\n        uni.request({\n            url: 'https://devapi.qweather.com/v7/weather/now',\n            method: 'GET',\n            data: {\n                location: location || '101010100',\n                key: QWEATHER_KEY\n            },\n            success: (res) => {\n                if (res.statusCode === 200 && res.data.code === '200') {\n                    try {\n                        // 缓存数据\n                        uni.setStorageSync('weatherCache', res.data);\n                        uni.setStorageSync('weatherCache_time', Date.now());\n                        resolve(res.data);\n                    } catch (error) {\n                        console.error('缓存天气数据失败:', error);\n                        resolve(res.data); // 即使缓存失败也返回数据\n                    }\n                } else {\n                    reject({\n                        code: -1,\n                        message: res.data.code || '获取天气数据失败'\n                    });\n                }\n            },\n            fail: (err) => {\n                reject(err);\n            }\n        });\n    });\n};\n\n// 和风天气城市查询接口\nconst getLocationId = (longitude, latitude) => {\n    return new Promise((resolve, reject) => {\n        // 先检查缓存\n        const cachedLocation = getCachedData('locationCache');\n        if (cachedLocation) {\n            resolve(cachedLocation);\n            return;\n        }\n\n        uni.request({\n            url: 'https://geoapi.qweather.com/v2/city/lookup',\n            method: 'GET',\n            data: {\n                location: `${longitude},${latitude}`,\n                key: QWEATHER_KEY\n            },\n            success: (res) => {\n                if (res.statusCode === 200 && res.data.code === '200' && res.data.location?.[0]) {\n                    try {\n                        // 缓存数据\n                        uni.setStorageSync('locationCache', res.data.location[0]);\n                        uni.setStorageSync('locationCache_time', Date.now());\n                        resolve(res.data.location[0]);\n                    } catch (error) {\n                        console.error('缓存位置数据失败:', error);\n                        resolve(res.data.location[0]); // 即使缓存失败也返回数据\n                    }\n                } else {\n                    reject({\n                        code: -1,\n                        message: res.data.code || '获取城市信息失败'\n                    });\n                }\n            },\n            fail: (err) => {\n                reject(err);\n            }\n        });\n    });\n};\n\n// 待办事项分析接口\nconst analyzeTodoList = (input) => {\n    return new Promise((resolve, reject) => {\n        uni.request({\n            url: 'https://api.coze.cn/v1/workflow/run',\n            method: 'POST',\n            header: {\n                'Authorization': 'Bearer pat_0xvh1L4lHPEiozeyZ0u9TnnVwD4cO8GkaM87ceE4z5is1uIuydjQ4AnzsIpgNFoV',\n                'Content-Type': 'application/json'\n            },\n            data: {\n                \"workflow_id\": \"7473912204761677875\",\n                \"parameters\": {\n                    \"input\": input\n                }\n            },\n            success: (res) => {\n                if (res.data.code === 0) {\n                    try {\n                        // 解析返回的数据\n                        const todoData = JSON.parse(res.data.data);\n                        resolve(todoData);\n                    } catch (error) {\n                        reject({\n                            code: -1,\n                            message: '数据解析失败'\n                        });\n                    }\n                } else {\n                    reject({\n                        code: -1,\n                        message: res.data.msg || '待办事项分析失败'\n                    });\n                }\n            },\n            fail: (err) => {\n                reject(err);\n            }\n        });\n    });\n};\n\n// 统一导出所有函数\nexport {\n    getWeatherReport,\n    getBookRecommend,\n    translateText,\n    getMovieData,\n    getHolidayData,\n    getShoppingAdvice,\n    getQWeather,\n    getLocationId,\n    analyzeTodoList,\n    QWEATHER_KEY\n}"],"names":["uni"],"mappings":"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"}